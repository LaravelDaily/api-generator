<?php

namespace Laraveldaily\Apigenerator\Generators;

class ApiRouteGenerator
{

    protected $blockStart;
    protected $blockEnd;
    protected $routePath;
    protected $block;
    protected $file;
    protected $blockPattern;
    protected $blockExists;

    public function __construct()
    {
        $this->blockStart = '#autogenerated';
        $this->blockEnd = '#endautogenerated';

        $this->routePath = base_path('routes/api.php');

        $this->blockPattern = '/' . $this->blockStart . '(.+)' . $this->blockEnd . '/si';

        $this->blockExists = false;

        if (!file_exists($this->routePath)) {
            file_put_contents('<?php', $this->routePath);
        }

        $this->file = file_get_contents($this->routePath);

        // remove php ending tag
        // because we always append to the end
        $this->file = str_replace('?>', '', $this->file);

        $this->makeBlock();

    }

    public function generate()
    {
        array_unshift($this->block, $this->blockStart);
        $this->block[] = $this->blockEnd;
        $string = implode("\r\n", $this->block);
        if ($this->blockExists) {
            $this->file = preg_replace($this->blockPattern, $string, $this->file);
        } else {
            $this->file .= $string;
        }
        file_put_contents($this->routePath, $this->file);
    }

    public function resource($name)
    {
        $line = "Route::apiResource('v1/" . lcfirst($name) . "', 'Api\\" . $name . "Controller');";
        if (!$this->blockHasResource($name)) {
            $this->block[] = $line;
            return false;
        }
        return true;
    }

    private function makeBlock()
    {
        $regex = $this->blockPattern;
        $this->blockExists = preg_match($regex, $this->file, $matches);
        if ($this->blockExists) {
            $matches = trim($matches[1]);
            $matches = preg_split('/$\R?^/m', $matches);
            foreach ($matches as $match) {
                $m = trim($match);
                if ($m != '') {
                    $this->block[] = $m;
                }
            }
            if ($this->block == null) {
                $this->block = [];
            }
        } else {
            $this->block = [];
        }
    }

    private function blockHasResource($name)
    {
        $block = implode('\n', $this->block);
        if ($block == '') {
            return false;
        }
        if (preg_match(preg_quote("/Route::resource('" . lcfirst($name) . "', 'Api\\" . $name . "Controller'/"), $block)) {
            return true;
        }
        return false;
    }

}
